#!/bin/bash
set -e

instal="sudo apt-get install"
git="sudo git clone"
change="sudo sed -i"
copy="sudo cp"
chow="sudo chown"
repo="sudo add-apt-repository"
update="sudo debconf-apt-progress -- apt-get update"
inst="sudo debconf-apt-progress -- apt-get -y install"


$inst dialog -y
$inst whiptail -y

whiptail --title "KODISERVER BY TNDS" --msgbox "WELCOME TO INSTALLATION OF KODISERVER.              Choose Ok to continue." 10 60

whiptail --clear --title "CONVERT KODIBUNTU IN KODISERVER" \
    --menu "Choose your option" 10 60 2 \
    "A" "YOUR FIRST INSTALLATION" \
    "B" "IT'S NOT FIRST INSTALLATION" 2> /tmp/resposta0.tmp

    kodiserver=$?
    choice=`cat /tmp/resposta0.tmp`

    case $kodiserver in

           0) case $choice in

                  A)
		     echo "Installing the necessary dependencies and downloading the necessary files to install KODIServer"
			$inst git-core
			{
			$git https://github.com/tnds82/kodiserver.git ~/kodiserver --progress 2>&1
                         for ((i = 0 ; i <= 100 ; i+=5)); do
                                sleep 0.4
                                echo $i
                         done
                        } | whiptail --gauge "Cloning files KODIServer" 6 50 0
			$inst git-core python python-cheetah git
			$inst unrar
			$inst avahi-utils
			$inst build-essential
			$inst libssl-dev libpcsclite-dev
			$inst mercurial cvs subversion libncurses-dev
			$inst cmake
			$inst curl
			$inst upstart
                     ;;
                  B)
			{
    			 for ((i = 0 ; i <= 100 ; i+=5)); do
        			sleep 0.1
        			echo $i
    			 done
			} | whiptail --gauge "Continuing Install Other Programs KODIServer" 6 50 0
              esac ;;

          *)clear ; exit ;;
    esac

whiptail --inputbox "Put yout username (ex: kodinas)" 10 60 "" 2> /tmp/resposta.tmp
username=`cat /tmp/resposta.tmp`

whiptail --inputbox "Put yout ip KODIBuntu (ex: 10.0.1.2)" 10 60 "" 2> /tmp/resposta1.tmp
ip=`cat /tmp/resposta1.tmp`

cmd=(whiptail --separate-output  --title "PROGRAMS TO INSTALL ON KODISERVER" --checklist "Select Options:" 21 42 14)
options=(1 "COUCHPOTATO " off    # any option can be set to default to "on"
         2 "SICKRAGE " off
         3 "HEADPHONES " off
         4 "MYLAR " off
         5 "XDM " off
         6 "PLEX MENU " off
	 7 "DVB / GRAPHICS CARDS " off
         8 "TVHeadend " off
         9 "OSCAM " off
	 10 "VDR MENU " off
         11 "TRANSMISSION " off
	 12 "WEBMIN " off
	 13 "STEAM - COMMING SOON " off
	 14 "OWNCLOUD" off)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
       1)
	 {
		$git https://github.com/RuudBurger/CouchPotatoServer.git /opt/couchpotato --progress 2>&1
                $chow $usename:$username -R /opt/couchpotato
                python /opt/couchpotato/CouchPotato.py --daemon
                $copy ~/kodiserver/autostart/couchpotato.conf /etc/init
                $change 's/username/'$username'/g' /etc/init/couchpotato.conf
    	     for ((i = 0 ; i <= 100 ; i+=5)); do
        	sleep 0.2
        	echo $i
    	     done
	 } | whiptail --gauge "Installing CouchPotato" 6 50 0
	    ;;
       2)
	 {
		$git https://github.com/SiCKRAGETV/SickRage.git /opt/sickrage --progress 2>&1
		$chow $username:$username -R /opt/sickrage
		python /opt/sickrage/SickBeard.py -d
		$copy ~/kodiserver/autostart/sickrage.conf /etc/init
		$change 's/username/'$username'/g' /etc/init/sickrage.conf
	     for ((i = 0 ; i <= 100 ; i+=5)); do
                sleep 0.2
                echo $i
             done
         } | whiptail --gauge "Installing SickRage" 6 50 0
            ;;
       3)
	 {
          	$git https://github.com/rembo10/headphones.git /opt/headphones --progress 2>&1
		$chow $username:$username -R /opt/headphones
		python /opt/headphones/Headphones.py -d
		$copy ~/kodiserver/autostart/headphones.conf /etc/init
		$change 's/username/'$username'/g' /etc/init/headphones.conf
	     for ((i = 0 ; i <= 100 ; i+=5)); do
                sleep 0.2
                echo $i
             done
         } | whiptail --gauge "Installing HeadPhones" 6 50 0
	    ;;
       4)
	 {
		$git https://github.com/evilhero/mylar -b development /opt/mylar --progress 2>&1
		$chow $username:$username -R /opt/mylar
		python /opt/mylar/Mylar.py -d 2>&1
		$copy ~/kodiserver/autostart/mylar.conf /etc/init
		$change 's/username/'$username'/g' /etc/init/mylar.conf
	     for ((i = 0 ; i <= 100 ; i+=5)); do
                sleep 0.2
                echo $i
             done
         } | whiptail --gauge "Installing Mylar" 6 50 0
            ;;
       5)
	 {
		$git https://github.com/lad1337/XDM.git /opt/xdm --progress 2>&1
		$chow $username:$username -R /opt/xdm
		echo "Creating Autostart XDM"
		$copy ~/kodiserver/autostart/xdm.conf /etc/init
		$change 's/username/'$username'/g' /etc/init/xdm.conf
	     for ((i = 0 ; i <= 100 ; i+=5)); do
                sleep 0.2
                echo $i
             done
         } | whiptail --gauge "Installing XDM" 6 50 0
            ;;
	6)
cmd=(whiptail --separate-output --title "PLEX MENU" --checklist "Select options to Plex" 10 35 2)
options=(1 "PLEX MEDIA SERVER " off    # any option can be set to default to "on"
         2 "PLEX CONNECT " off)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            echo "Installing Plex Media Server"
                sudo curl http://shell.ninthgate.se/packages/shell-ninthgate-se-keyring.key | sudo apt-key add -
                sudo echo "deb http://www.deb-multimedia.org wheezy main non-free" | sudo tee -a /etc/apt/sources.list.d/deb-multimedia.list
                sudo echo "deb http://shell.ninthgate.se/packages/debian wheezy main" | sudo tee -a /etc/apt/sources.list.d/plex.list
                $update
                $inst deb-multimedia-keyring --force-yes
                $update
                $inst plexmediaserver
		$copy -r ~/kodiserver/plexmediaserver/addons/*.bundle "/var/lib/plexmediaserver/Library/Application Support/Plex Media Server/Plug-ins"
            ;;
        2)
            echo "INSTALLING PLEX CONNECT"
	  {
                $git https://github.com/iBaa/PlexConnect.git /opt/plexconnect --progress 2>&1
                $chow $username:$username -R /opt/plexconnect
                $copy -r ~/kodiserver/plexconnect/trailers.* /opt/plexconnect/assets/certificates
                python /opt/plexconnect/PlexConnect.py -some Parameters >> /opt/plexconnect/Logfile_stout.log 2>&1 &
                sleep 30
                jobs
                kill %1
                kill -9 %1
                jobs
                $change "s@certfile = ./assets/certificates/trailers.pem@certfile = /opt/plexconnect/assets/certificates/trailers.pem@g" /opt/plexconnect/Settings.cfg
                $change "s/enable_plexgdm = True/enable_plexgdm = False/g" /opt/plexconnect/Settings.cfg
                $change "s/enable_plexconnect_autodetect = True/enable_plexconnect_autodetect = False/g" /opt/plexconnect/Settings.cfg
                $change 's/ip_pms = 192.168.178.10/ip_pms = '$ip'/g' /opt/plexconnect/Settings.cfg
                $change 's/ip_plexconnect = 0.0.0.0/ip_plexconnect = '$ip'/g' /opt/plexconnect/Settings.cfg
                $copy ~/kodiserver/autostart/plexconnect.conf /etc/init
             for ((i = 0 ; i <= 100 ; i+=5)); do
                sleep 0.2
                echo $i
             done
          } | whiptail --gauge "Installing PlexConnect" 6 50 0
            ;;
    esac
done
	  ;;
	7)
cmd=(whiptail --separate-output --title "Drivers DVB Cards and Graphics Cards" --checklist "Select your Card" 10 50 3)
options=(1 "Install Firmware Tevii S471 " off    # any option can be set to default to "on"
         2 "Install Driver Sundtek " off
         3 "Install Driver Nvidia " off)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            echo "Updating Firware Tevii S471"
		sudo unrar x ~/kodiserver/teviiS471/dvb-fe-ds3000.rar /lib/firmware
            ;;
        2)
            echo "Installing DVB CARD Sundtek"
                sudo chmod 755 ~/kodiserver/sundtek/sundtek_netinst.sh
                sudo ~/kodiserver/sundtek/sundtek_netinst.sh
            ;;
        3)
            echo "Installing Driver Nvidia"
		$inst nvidia-331-updates
            ;;
    esac
done
	    ;;
	8)
	    echo "Installing TVHeadend"
		curl http://apt.tvheadend.org/repo.gpg.key | sudo apt-key add -
		$repo -r http://apt.tvheadend.org/stable
		$repo http://apt.tvheadend.org/unstable
		$update
		$inst tvheadend -y
		$inst kodi-pvr-tvheadend-hts
	   ;;
	9)
	   echo "Installing Oscam"
		whiptail --inputbox "USERNAME FOR OSCAM (ex: test)" 10 60 "" 2> /tmp/resposta2.tmp
		oscamu=`cat /tmp/resposta2.tmp`

		whiptail --passwordbox "PASSWORD FOR OSCAM (ex: test)" 10 60 "" 2> /tmp/resposta3.tmp
		oscamp=`cat /tmp/resposta3.tmp`

		cd /usr/src
		sudo svn checkout http://streamboard.de.vu/svn/oscam/trunk oscam
		cd oscam
		sudo cmake -DWEBIF=1 -DPCSC=1
		sudo make
		$copy oscam /usr/local/bin
		cd ..
		sudo rm -rf oscam
		cd /usr/local/bin
		sudo chmod 755 oscam
		$change '$ i\/usr/local/bin/oscam -b' /etc/rc.local
		sudo chmod 777 /usr/local/etc
		$copy -r ~/kodiserver/oscam/oscam.* /usr/local/etc
		$change 's/"user"/'$oscamu'/g' /usr/local/etc/oscam.conf
		$change 's/"pass"/'$oscamp'/g' /usr/local/etc/oscam.conf
	   ;;
	10)
cmd=(whiptail --separate-output --title "VDR MENU" --checklist "Select options to VDR" 10 60 3)
options=(1 "Install VDR " off    # any option can be set to default to "on"
	 2 "Install Diseqc for VDR " off
         3 "Convert your enigma2 channels list for VDR " off)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1)
            echo "Installing VDR"
                whiptail --inputbox "USERNAME FOR VDRADMIN (ex: test)" 10 60 "" 2> /tmp/resposta4.tmp
                 vdru=`cat /tmp/resposta4.tmp`

                whiptail --passwordbox "PASSWORD FOR VDRADMIN (ex: test)" 10 60 "" 2> /tmp/resposta5.tmp
                 vdrp=`cat /tmp/resposta5.tmp`

                whiptail --inputbox "IP OSCAM (ex: 10.0.1.3)" 10 60 "" 2> /tmp/resposta13.tmp
                 iposcam=`cat /tmp/resposta13.tmp`

                whiptail --inputbox "OSCAM DVBAPI PORT (ex: 9000)" 10 60 "" 2> /tmp/resposta14.tmp
                 portoscam=`cat /tmp/resposta14.tmp`

                $repo ppa:yavdr/unstable-vdr
                $update
                sudo echo "Package: *" | sudo tee -a /etc/apt/preferences.d/yavdr-unstable-vdr
                sudo echo "Pin: release o=LP-PPA-yavdr-unstable-vdr" | sudo tee -a /etc/apt/preferences.d/yavdr-unstable-vdr
                sudo echo "Pin-Priority: 1000" | sudo tee -a /etc/apt/preferences.d/yavdr-unstable-vdr
                $update
                $inst vdr -y
                $inst dvb-apps -y
		$inst vdr-plugin-streamdev-server -y
                $inst vdr-plugin-streamdev-client -y
                $inst vdradmin-am -y
                $inst vdr-plugin-vnsiserver -y
                $inst vdr-plugin-xvdr -y
                $inst vdr-plugin-restfulapi -y
                $inst vdr-plugin-live -y
                $repo ppa:aap/vdr
                $repo ppa:aap/vdr-testing
                $update
                $inst vdr-plugin-dvbapi -y
                $inst vdr-plugin-wirbelscan -y
                $change "9 i\# Options that will correct channels list" /etc/default/vdr
                $change '10 i\export VDR_CHARSET_OVERRIDE="ISO-8859-1"' /etc/default/vdr
                $change '11 i\export LANG="pt_PT.UTF-8"' /etc/default/vdr
                $change "12 i\ " /etc/default/vdr
                $change "s/ENABLED=0/ENABLED=1/g" /etc/default/vdr
                $change 's/ENABLED="0"/ENABLED="1"/g' /etc/default/vdradmin-am
                $change 's/USERNAME = linvdr/USERNAME = '$vdru'/g' /var/lib/vdradmin-am/vdradmind.conf
                $change 's/PASSWORD = linvdr/PASSWORD = '$vdrp'/g' /var/lib/vdradmin-am/vdradmind.conf
                $change "s/#204.152.189.113/204.152.189.113/g" /var/lib/vdr/plugins/xvdr/allowed_hosts.conf
		$change "s@#0.0.0.0/0@0.0.0.0/0@g" /var/lib/vdr/plugins/xvdr/allowed_hosts.conf
                $change "s/#204.152.189.113/204.152.189.113/g" /etc/vdr/plugins/vnsiserver/allowed_hosts.conf
                $change "s@#0.0.0.0/0@0.0.0.0/0@g" /etc/vdr/plugins/vnsiserver/allowed_hosts.conf
                $change '16 i\dvbapi' /etc/vdr/plugins/order.conf
                $change "s@#192.168.100.0/24@192.168.100.0/24@g" /etc/vdr/plugins/streamdevhosts.conf
                $change "s/#204.152.189.113/204.152.189.113/g" /etc/vdr/plugins/streamdevhosts.conf
                $change "s@#239.255.0.0/16@239.255.0.0/16@g" /etc/vdr/plugins/streamdevhosts.conf
                $change "s@#0.0.0.0/0@0.0.0.0/0@g" /etc/vdr/plugins/streamdevhosts.conf
                $change "s@#192.168.100.0/24@192.168.100.0/24@g" /etc/vdr/svdrphosts.conf
                $change "s/#204.152.189.113/204.152.189.113/g" /etc/vdr/svdrphosts.conf
                $change "s@#0.0.0.0/0@0.0.0.0/0@g" /etc/vdr/svdrphosts.conf
                sudo /etc/init.d/vdr start
                echo "Hello, I'm sleeping for 20 seconds to VDR start"
                sleep 15s
                echo "all Done."
                sudo /etc/init.d/vdr stop
                $change "100 i\dvbapi.OSCamHost = $iposcam" /var/lib/vdr/setup.conf
                $change '101 i\dvbapi.OSCamNetwork = 1' /var/lib/vdr/setup.conf
                $change "102 i\dvbapi.OSCamPort = $portoscam" /var/lib/vdr/setup.conf
                $copy -r ~/kodiserver/vdr/channels.conf /etc/vdr/
                $inst kodi-pvr-vdr-vnsi
            ;;
        2)
            echo "Configuring your Diseqc for VDR"
                sudo bash ~/kodiserver/vdr/diseqcsetup_v0.15
            ;;
        3)
            echo "Converting your list enigam2 to VDR"
                whiptail --inputbox "Put the list in onde Folder in Downloads. The name of Folder? (ex: enigma2)" 10 60 "" 2> /tmp/resposta6.tmp
                e2vdr=`cat /tmp/resposta6.tmp`

                sudo mkdir ~/kodiserver/vdr/channels
                $copy -r ~/Downloads/$e2vdr ~/kodiserver/vdr
                sudo mv ~/kodiserver/vdr/$e2vdr ~/kodiserver/vdr/e2settings
                sudo bash ~/kodiserver/vdr/lamedb2vdr.sh ~/kodiserver/vdr/e2settings ~/kodiserver/vdr/channels
                $copy -r ~/kodiserver/vdr/channels/favorites_channels.conf /etc/vdr/channels.conf
            ;;
    esac
done
	   ;;
	11)
	   echo "Installing Transmission"
		whiptail --inputbox "Location Your Download (ex: /storage/download)" 10 60 "" 2> /tmp/resposta7.tmp
                tdown=`cat /tmp/resposta7.tmp`

		whiptail --inputbox "Location Your Incomplete Download (ex: /storage/download/incomplete)" 10 60 "" 2> /tmp/resposta8.tmp
                tincom=`cat /tmp/resposta8.tmp`

		whiptail --inputbox "Location Your BlsckHole Folder (ex: /storage/download/blackhole)" 10 60 "" 2> /tmp/resposta9.tmp
                tblack=`cat /tmp/resposta9.tmp`

		whiptail --inputbox "IP's on local lan to access (ex: 192.168.0.* or 10.0.1.*)" 10 60 "" 2> /tmp/resposta10.tmp
                tip=`cat /tmp/resposta10.tmp`

		whiptail --inputbox "Choose your username for Transmission (ex: test)" 10 60 "" 2> /tmp/resposta11.tmp
                tuser=`cat /tmp/resposta11.tmp`

		whiptail --passwordbox "Choose your password for Transmission (ex: test1)" 10 60 "" 2> /tmp/resposta12.tmp
                tpass=`cat /tmp/resposta12.tmp`

		$inst transmission-cli transmission-common transmission-daemon -y
		sudo service transmission-daemon stop
		$change 's/"rpc-username": "transmission",/"rpc-username": "'$tuser'",/g' /etc/transmission-daemon/settings.json
		$change '/"rpc-password"/d' /etc/transmission-daemon/settings.json
		$change '49 i\    "rpc-password": "'$tpass'",' /etc/transmission-daemon/settings.json
		$change 's/"rpc-whitelist": "127.0.0.1",/"rpc-whitelist": "127.0.0.1,'$tip'",/g' /etc/transmission-daemon/settings.json
		$change 's@"incomplete-dir": "/home/debian-transmission/Downloads",@"incomplete-dir": "'$tincom'",@g' /etc/transmission-daemon/settings.json
		$change 's@"download-dir": "/var/lib/transmission-daemon/downloads",@"download-dir": "'$tdown'",@g' /etc/transmission-daemon/settings.json
		$change 's/"start-added-torrents": true,/"start-added-torrents": false,/g' /etc/transmission-daemon/settings.json
		$change 's/"utp-enabled": true/"utp-enabled": true,/g' /etc/transmission-daemon/settings.json
		$change '71 i\    "watch-dir": "'$tblack'",' /etc/transmission-daemon/settings.json
		$change '72 i\    "watch-dir-enabled": true' /etc/transmission-daemon/settings.json
		$change "311 i\    elif [ x"$DESKTOP_SESSION" = x"Lubuntu" ]; then DE=lxde;" /usr/bin/xdg-open
		$change "489 i\    # patch" /usr/bin/xdg-open
		$change "490 i\    elif (echo "$1" | grep -q '^subl://') then" /usr/bin/xdg-open
		$change "491 i\      subl-urlhandler $1" /usr/bin/xdg-open
		$change "492 i\    elif (echo "$1" | grep -q '^magnet:') then" /usr/bin/xdg-open
		$change "493 i\      transmission-gtk $1" /usr/bin/xdg-open
	   ;;
	12)
	   echo " Installing Webmin"
		sudo echo "# WEBMIN Repository" | sudo tee -a /etc/apt/sources.list
		sudo echo "deb http://download.webmin.com/download/repository sarge contrib" | sudo tee -a /etc/apt/sources.list
		sudo echo "deb http://webmin.mirror.somersettechsolutions.co.uk/repository sarge contrib" | sudo tee -a /etc/apt/sources.list
		wget http://www.webmin.com/jcameron-key.asc
		sudo apt-key add jcameron-key.asc
		$update
		$inst webmin -y
		sudo service webmin stop
                $git https://github.com/winfuture/Bootstrap3-Webmin-Theme.git /usr/share/webmin/bootstrap --progress 2>&1
                $change "s/gray-theme/bootstrap/g" /usr/share/webmin/defaulttheme
                $change "s/theme=gray-theme/theme=bootstrap/g" /etc/webmin/config
                $change "21 i\webprefix=" /etc/webmin/config
                $change "22 i\theme_root=bootstrap" /etc/webmin/config
                $change "s/preroot=gray-theme/preroot=bootstrap/g" /etc/webmin/miniserv.conf
                $change "39 i\logouttimes=" /etc/webmin/miniserv.conf
                $change "40 i\preroot_root=bootstrap" /etc/webmin/miniserv.conf
	   ;;
	13)
	   echo "Installing Steam"
		$inst wmctrl
		wget http://media.steampowered.com/client/installer/steam.deb && sudo dpkg -i steam.deb
		sudo cp /usr/share/xsessions/hidden/openbox.desktop /usr/share/xsessions/
		sudo dbus-send --system --type=method_call --print-reply --dest=org.freedesktop.Accounts /org/freedesktop/Accounts/User1000 org.freedesktop.Accounts.User.SetXSession string:openbox
		mkdir -p $HOME/.config/openbox/ && echo "export DISPLAY=:0" >> $HOME/.config/openbox/autostart.sh && echo "xsetroot -solid black &" >> $HOME/.config/openbox/autostart.sh && echo "/usr/bin/kodi &" >> $HOME/.config/openbox/autostart.sh && chmod +x $HOME/.config/openbox/autostart.sh
	   ;;
	14)
	   echo "Installing OwnCloud"
		whiptail --inputbox "Choose your username for Database Owncloud (ex: owncloud)" 10 60 "" 2> /tmp/resposta15.tmp
                ocuser=`cat /tmp/resposta15.tmp`

		whiptail --passwordbox "Choose your username for Database Owncloud (ex: owncloud)" 10 60 "" 2> /tmp/resposta16.tmp
                ocpass=`cat /tmp/resposta16.tmp`

		Q1="CREATE DATABASE owncloud;"
                Q2="GRANT ALL ON owncloud.* TO '"$ocuser"'@'localhost' IDENTIFIED BY '"$ocpass"';"
                SQL="${Q1}${Q2}"

		wget http://download.opensuse.org/repositories/isv:ownCloud:community/xUbuntu_14.04/Release.key
		sudo apt-key add - < Release.key
		sudo echo "deb http://download.opensuse.org/repositories/isv:/ownCloud:/community/xUbuntu_14.10/ /" | sudo tee -a /etc/apt/sources.list.d/owncloud.list
		$update
		$inst owncloud -y
		echo "Installing MariaDB (MySql)"
		$inst mariadb-server -y
		sudo mysql -uroot -p -e "$SQL"
	   ;;
    esac

done

#PERMISSIONS TO ACCESS INSTALED PROGRAMS
sudo chmod -R 777 /opt

#ALL INFORMATION TO ACCESS ALL PROGRAMS
whiptail --textbox ~/kodiserver/info 22 76
